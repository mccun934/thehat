#!/usr/bin/ruby
#################################################################################
# TheHat - an interactive workflow system
# Copyright (C) 2007,2008  David Parker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#################################################################################

require 'wfengine'
require 'rubygems'
require "xmpp4r"
require 'xmpp4r/muc'

iniFilename = ARGV[0]
workflow = ARGV[1]

if not iniFilename
	puts "You must specify a configuration file - ending run\n"
	exit(1)
end

ini = IniFile.load(iniFilename)

account = ini['thehat-jabber']['account']
host = ini['thehat-jabber']['host']
resource = ini['thehat-jabber']['resource']
password = ini['thehat-jabber']['password']
room = ini['thehat-jabber']['room']


workflow = Workflow.new(iniFilename,workflow)
mutex = Mutex.new

Jabber.debug=(false)
done = false

begin
	puts "** #{Time.now.localtime.to_s} Connecting: #{account}@#{host}/#{resource}  #{password}\n"
	client = Jabber::Client.new("#{account}@#{host}/#{resource}",true)
	client.connect
	client.auth(password)
rescue
	puts "** #{Time.now.localtime.to_s} Error connecting: #{$!}\n"
	exit
end
puts "** #{Time.now.localtime.to_s} Connected: #{account}@#{host}/#{resource}\n"


puts "** #{Time.now.localtime.to_s} Starting listener thread\n"
my_muc = Jabber::MUC::SimpleMUCClient.new(client)
my_muc.on_message { |time,nic,text|
	if not time # ones with time are historical and dizzyingly confusing to the bot
		if nic != resource # this is something *I* said, which of course don't want
			puts "++ #{Time.now.localtime.to_s} <#{nic}> #{text}\n"
			if text =~ /^#{resource}[: ,]+(.*)/ or text =~ /^#{resource}$/
				begin
					#puts "entering listener mutex block\n"
					mutex.synchronize do
						if cmd = $1
							if cmd == 'quit'
								puts "== #{Time.now.localtime.to_s} Got quit, setting done to true"
								#done = true
							else
								workflow.processCommand(nic,cmd)
							end
						else
							workflow.processCommand(nic,'')
						end
						workflow.messages.split(/\n/).each { |line|
							my_muc.say(line)
							puts "== #{Time.now.localtime.to_s} #{line}\n"
							sleep(0.5)
						}
						workflow.clearMessages
					end
					#puts "leaving listener mutex block\n"
				rescue
					puts "!! #{Time.now.localtime.to_s} #{$!}\n"
					my_muc.say($!)
				end
			end
		end
	end
}
puts "** #{Time.now.localtime.to_s} Joining MUC group\n"
my_muc.join(Jabber::JID.new("#{room}/#{resource}"))
puts "@@ #{Time.now.localtime.to_s} Starting clock loop\n"
while not done
	mutex.synchronize do
		#puts "in clock mutex block\n"
		begin
			workflow.ticToc(false) # if true, it's quite noisy
			workflow.messages.split(/\n/).each { |line|
				my_muc.say(line)
				puts "@@ #{Time.now.localtime.to_s} #{line}\n"
				sleep(0.5)
			}
			workflow.clearMessages
		rescue
			puts "!! #{Time.now.localtime.to_s} #{$!}\n"
			my_muc.say($!)
		end
		#puts "leaving clock mutex block\n"
	end
	sleep(5)
end